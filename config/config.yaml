app:
  name: "AI SQL Agent"
  environment: "dev"


llm:
  # provider: one of ["openai", "deepseek", "gemini-openai", "ollama"]
  provider: "openai" 
  model: "gpt-4.1-mini"                # matches what you saw in `ollama list`. Open is model for example: gpt-4o-mini. 
  temperature: 0.1
  timeout_seconds: 60
  max_retries: 10
  # For openai: leave base_url empty; for others supply as below.
  base_url: ""   # e.g., "https://api.deepseek.com" or "http://localhost:11434/v1" (Ollama)





  # API keys are read from environment (.env) to avoid committing secrets:
  # OPENAI_API_KEY, DEEPSEEK_API_KEY, GEMINI_API_KEY, OLLAMA_API_KEY (placeholder)
  # Azure/OpenAI variants can also be supported by pointing base_url + key.

database:
  # Full ODBC string; enforce read-only at connection level where possible.
  # Use your AG listener if you want read-only routing to secondaries.
  # Dialect is T-SQL.
   odbc_connect: "Driver={ODBC Driver 18 for SQL Server};Server=msdfs1398354461;Database=Haji_Ps_test;Encrypt=yes;TrustServerCertificate=yes;UID=sa;PWD=YourPassword;"
  # The engine is created with: mssql+pyodbc:///?odbc_connect=<urlencoded string>
  # ApplicationIntent=ReadOnly & AG listener encourages read-only routing. :contentReference[oaicite:7]{index=7}

limits:
  default_page_size: 200
  max_page_size: 1000
  hard_row_cap: 10000        # will auto-paginate/hard-cap if query is too large
  query_timeout_seconds: 60

security:
  allow_ctes: true           # WITH ... SELECT ok
  block_functions:
    - "OPENROWSET"
    - "OPENDATASOURCE"
    - "xp_cmdshell"
    - "sp_OA%"
    - "sp_executesql"        # we generate plain SELECT only
    - "EXEC"
    - "EXECUTE"
  block_keywords:
    - "INSERT"
    - "UPDATE"
    - "DELETE"
    - "MERGE"
    - "TRUNCATE"
    - "DROP"
    - "ALTER"
    - "CREATE"
    - "GRANT"
    - "REVOKE"
    - "BACKUP"
    - "RESTORE"

chat_history:
  enabled: true
  sqlite_path: "db/chat_history.sqlite3"
  max_messages_per_session: 30

schema:
  path: "schema/database_schema.json"   # Your exported schema JSON
  dialect: "tsql"

ui:
  enable_charts: true

retriever:
  enabled: true
  persist_path: ./chroma_schema_index
  top_k: 25   # you can set 10, 30, 50 depending on needs
  embedding_model: all-MiniLM-L6-v2


mock_flow:
  enabled: "0"          # when 1 â†’ use dummy SQL + dummy data
