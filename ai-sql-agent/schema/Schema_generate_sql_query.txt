DECLARE @Json NVARCHAR(MAX);
DECLARE @ChunkCount INT;

;WITH TableColumns AS (
    SELECT 
        s.name AS SchemaName,
        t.name AS TableName,
        c.name AS ColumnName,
        ty.name AS DataType,
        CASE 
            WHEN ty.name IN ('nvarchar','varchar','char','nchar') 
                 THEN '(' + CAST(c.max_length AS VARCHAR(10)) + ')'
            WHEN ty.name IN ('decimal','numeric') 
                 THEN '(' + CAST(c.precision AS VARCHAR(10)) + ',' + CAST(c.scale AS VARCHAR(10)) + ')'
            ELSE ''
        END AS TypeLength
    FROM sys.tables t
    INNER JOIN sys.schemas s ON t.schema_id = s.schema_id
    INNER JOIN sys.columns c ON t.object_id = c.object_id
    INNER JOIN sys.types ty ON c.user_type_id = ty.user_type_id
),
TableFKs AS (
    SELECT 
        fk.name AS ForeignKeyName,
        s1.name AS ParentSchema,
        tp.name AS ParentTable,
        cp.name AS ParentColumn,
        s2.name AS RefSchema,
        tr.name AS ReferencedTable,
        cr.name AS ReferencedColumn
    FROM sys.foreign_keys fk
    INNER JOIN sys.foreign_key_columns fkc ON fk.object_id = fkc.constraint_object_id
    INNER JOIN sys.tables tp ON fkc.parent_object_id = tp.object_id
    INNER JOIN sys.columns cp ON fkc.parent_object_id = cp.object_id AND fkc.parent_column_id = cp.column_id
    INNER JOIN sys.tables tr ON fkc.referenced_object_id = tr.object_id
    INNER JOIN sys.columns cr ON fkc.referenced_object_id = cr.object_id AND fkc.referenced_column_id = cr.column_id
    INNER JOIN sys.schemas s1 ON tp.schema_id = s1.schema_id
    INNER JOIN sys.schemas s2 ON tr.schema_id = s2.schema_id
),
TableRowCounts AS (
    SELECT 
        s.name AS SchemaName,
        t.object_id,
        t.name AS TableName,
        SUM(p.[row_count]) AS [RowCount]
    FROM sys.tables t
    INNER JOIN sys.schemas s ON t.schema_id = s.schema_id
    INNER JOIN sys.dm_db_partition_stats p 
        ON t.object_id = p.object_id
        AND p.index_id IN (0,1)
    GROUP BY s.name, t.object_id, t.name
    HAVING SUM(p.[row_count]) > 0
)
SELECT @Json = 
'{' + CHAR(13) + CHAR(10) +
'  "DatabaseSchema": [' + CHAR(13) + CHAR(10) +
STUFF(( 
    SELECT 
        ',{' + CHAR(13) + CHAR(10) +
        '    "SchemaName": "' + t.SchemaName + '",' + CHAR(13) + CHAR(10) +
        '    "TableName": "' + t.TableName + '",' + CHAR(13) + CHAR(10) +
        '    "FullTableName": "' + t.SchemaName + '.' + t.TableName + '",' + CHAR(13) + CHAR(10) +
        '    "Columns": {' + CHAR(13) + CHAR(10) +
        STUFF((
            SELECT 
                ', "' + c.ColumnName + '": "' + c.DataType + c.TypeLength + '"'
            FROM TableColumns c
            WHERE c.SchemaName = t.SchemaName AND c.TableName = t.TableName
            ORDER BY c.ColumnName
            FOR XML PATH(''), TYPE
        ).value('.', 'NVARCHAR(MAX)'), 1, 2, '') + CHAR(13) + CHAR(10) +
        '    },' + CHAR(13) + CHAR(10) +
        '    "ForeignKeys": [' + CHAR(13) + CHAR(10) +
        ISNULL(STUFF((
            SELECT 
                ',{ "ParentColumn": "' + f.ParentColumn + 
                '", "ReferencedTable": "' + f.RefSchema + '.' + f.ReferencedTable + 
                '", "ReferencedColumn": "' + f.ReferencedColumn + '" }'
            FROM TableFKs f
            WHERE f.ParentSchema = t.SchemaName AND f.ParentTable = t.TableName
            ORDER BY f.ForeignKeyName
            FOR XML PATH(''), TYPE
        ).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), '') + CHAR(13) + CHAR(10) +
        '    ]' + CHAR(13) + CHAR(10) +
        '}'
    FROM TableRowCounts t
    ORDER BY t.SchemaName, t.TableName
    FOR XML PATH(''), TYPE
).value('.', 'NVARCHAR(MAX)'), 1, 1, '') + CHAR(13) + CHAR(10) +
'  ]' + CHAR(13) + CHAR(10) +
'}';

-- Split into chunks
SET @ChunkCount = CEILING(LEN(@Json) / 4000.0);

;WITH Numbers AS (
    SELECT TOP (@ChunkCount) ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS n
    FROM sys.objects
)
SELECT 
    n AS ChunkId,
    SUBSTRING(@Json, (n - 1) * 4000 + 1, 4000) AS JsonPart
FROM Numbers
ORDER BY n;
